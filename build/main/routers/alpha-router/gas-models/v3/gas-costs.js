"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.NATIVE_OVERHEAD = exports.NATIVE_UNWRAP_OVERHEAD = exports.NATIVE_WRAP_OVERHEAD = exports.TOKEN_OVERHEAD = exports.SINGLE_HOP_OVERHEAD = exports.COST_PER_HOP = exports.COST_PER_INIT_TICK = exports.BASE_SWAP_COST = exports.COST_PER_UNINIT_TICK = void 0;
const bignumber_1 = require("@ethersproject/bignumber");
// Cost for crossing an uninitialized tick.
exports.COST_PER_UNINIT_TICK = bignumber_1.BigNumber.from(0);
//l2 execution fee on optimism is roughly the same as mainnet
const BASE_SWAP_COST = () => bignumber_1.BigNumber.from(2000);
exports.BASE_SWAP_COST = BASE_SWAP_COST;
const COST_PER_INIT_TICK = () => bignumber_1.BigNumber.from(31000);
exports.COST_PER_INIT_TICK = COST_PER_INIT_TICK;
const COST_PER_HOP = () => bignumber_1.BigNumber.from(80000);
exports.COST_PER_HOP = COST_PER_HOP;
const SINGLE_HOP_OVERHEAD = () => bignumber_1.BigNumber.from(15000);
exports.SINGLE_HOP_OVERHEAD = SINGLE_HOP_OVERHEAD;
const TOKEN_OVERHEAD = () => bignumber_1.BigNumber.from(0);
exports.TOKEN_OVERHEAD = TOKEN_OVERHEAD;
// TODO: change per chain
const NATIVE_WRAP_OVERHEAD = () => bignumber_1.BigNumber.from(27938);
exports.NATIVE_WRAP_OVERHEAD = NATIVE_WRAP_OVERHEAD;
const NATIVE_UNWRAP_OVERHEAD = () => bignumber_1.BigNumber.from(36000);
exports.NATIVE_UNWRAP_OVERHEAD = NATIVE_UNWRAP_OVERHEAD;
const NATIVE_OVERHEAD = (amount, quote) => {
    if (amount.isNative) {
        // need to wrap eth in
        return (0, exports.NATIVE_WRAP_OVERHEAD)();
    }
    if (quote.isNative) {
        // need to unwrap eth out
        return (0, exports.NATIVE_UNWRAP_OVERHEAD)();
    }
    return bignumber_1.BigNumber.from(0);
};
exports.NATIVE_OVERHEAD = NATIVE_OVERHEAD;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2FzLWNvc3RzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vc3JjL3JvdXRlcnMvYWxwaGEtcm91dGVyL2dhcy1tb2RlbHMvdjMvZ2FzLWNvc3RzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLHdEQUFxRDtBQUdyRCwyQ0FBMkM7QUFDOUIsUUFBQSxvQkFBb0IsR0FBRyxxQkFBUyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUV0RCw2REFBNkQ7QUFDdEQsTUFBTSxjQUFjLEdBQUcsR0FBYyxFQUFFLENBQUMscUJBQVMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7QUFBdkQsUUFBQSxjQUFjLGtCQUF5QztBQUM3RCxNQUFNLGtCQUFrQixHQUFHLEdBQWMsRUFBRSxDQUFDLHFCQUFTLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQTVELFFBQUEsa0JBQWtCLHNCQUEwQztBQUVsRSxNQUFNLFlBQVksR0FBRyxHQUFjLEVBQUUsQ0FBQyxxQkFBUyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUF0RCxRQUFBLFlBQVksZ0JBQTBDO0FBRTVELE1BQU0sbUJBQW1CLEdBQUcsR0FBYyxFQUFFLENBQUMscUJBQVMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7QUFBN0QsUUFBQSxtQkFBbUIsdUJBQTBDO0FBRW5FLE1BQU0sY0FBYyxHQUFHLEdBQWMsRUFBRSxDQUFDLHFCQUFTLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQXBELFFBQUEsY0FBYyxrQkFBc0M7QUFFakUseUJBQXlCO0FBQ2xCLE1BQU0sb0JBQW9CLEdBQUcsR0FBYyxFQUFFLENBQUMscUJBQVMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7QUFBOUQsUUFBQSxvQkFBb0Isd0JBQTBDO0FBRXBFLE1BQU0sc0JBQXNCLEdBQUcsR0FBYyxFQUFFLENBQUMscUJBQVMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7QUFBaEUsUUFBQSxzQkFBc0IsMEJBQTBDO0FBRXRFLE1BQU0sZUFBZSxHQUFHLENBQzdCLE1BQWdCLEVBQ2hCLEtBQWUsRUFDSixFQUFFO0lBQ2IsSUFBSSxNQUFNLENBQUMsUUFBUSxFQUFFO1FBQ25CLHNCQUFzQjtRQUN0QixPQUFPLElBQUEsNEJBQW9CLEdBQUUsQ0FBQztLQUMvQjtJQUNELElBQUksS0FBSyxDQUFDLFFBQVEsRUFBRTtRQUNsQix5QkFBeUI7UUFDekIsT0FBTyxJQUFBLDhCQUFzQixHQUFFLENBQUM7S0FDakM7SUFDRCxPQUFPLHFCQUFTLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQzNCLENBQUMsQ0FBQztBQWJXLFFBQUEsZUFBZSxtQkFhMUIifQ==